@page
@using ShoeShop.Models
@model ShoeShop.Pages.Admin.CatalogModel
@{
    ViewData["Title"] = "Администрирование товаров";

    Dictionary<string, string> sortDictionary = new Dictionary<string, string>(new KeyValuePair<string, string>[] {
        new KeyValuePair<string, string>("Default", "По умолчанию"),
        new KeyValuePair<string, string>("Cheaper", "Сначала Дешевле"),
        new KeyValuePair<string, string>("Expensive", "Сначала Дороже"),
        new KeyValuePair<string, string>("ByDate", "По дате")
    });

    Dictionary<string, string> saleFilterDictionary = new Dictionary<string, string>(new KeyValuePair<string, string>[] {
        new KeyValuePair<string, string>("All", "Все товары"),
        new KeyValuePair<string, string>("IsSale", "Товары в продаже"),
        new KeyValuePair<string, string>("IsNotSale", "Товары снятые с продажи")
    });
}

<div class="row">
    <h1 class="col text-end">Администрирование каталога товаров</h1>
</div>


<div class="row border border-1 mx-2">
    <form id="sortingForm" method="get" enctype="application/x-www-form-urlencoded">
        <div class="row p-2 justify-content-end">

            <div class="col-md-4">
                <label for="saleFilter" class="form-label">Фильтр товаров</label>
                <select id="saleFilter" name="salefilter" class="form-select" onchange="document.getElementById('sortingForm').submit()">
                    @foreach (string item in Enum.GetNames(typeof(IsSaleFilter))) {
                        if (Model.IsSaleFilter.ToString() == item) {
                            <option value="@item" selected>@saleFilterDictionary[item]</option>
                        } else {
                            <option value="@item">@saleFilterDictionary[item]</option>
                        }
                    }
                </select>
            </div>

            <div class="col-md-4">
                <label for="sortingPrice" class="form-label">Сортировка по цене</label>
                <select id="sortingPrice" name="sorting" class="form-select" onchange="document.getElementById('sortingForm').submit()">
                    @foreach (string item in Enum.GetNames(typeof(ProductSorting))) {
                        if (Model.Sorting.ToString() == item) {
                            <option value="@item" selected>@sortDictionary[item]</option>
                        } else {
                            <option value="@item">@sortDictionary[item]</option>
                        }
                    }
                </select>
            </div>

            <div class="col-md-4">
                <label for="partProductName" class="form-label">Поиск по названию</label>
                <div class="input-group">
                    <input id="partProductName" name="partproductname" type="text" value="@Model.PartProductName" class="form-control">
                    <button class="btn btn-secondary" type="submit"><i class="fa-solid fa-magnifying-glass"></i></button>
                </div>
            </div>
        </div>
    </form>
</div>

<div class="row mt-3 p-2 text-end">
    <p>
        <a asp-page="/Admin/AddProduct" class="btn btn-lg btn-outline-primary"><i class="fa-solid fa-circle-plus"></i></a>
    </p>
</div>

@if (Model.Products == null || Model.Products.Count == 0) {
    <div class="row mt-3">
        <p class="text-center display-4">Товары не найдены</p>
    </div>
}


<div class="row row-cols g-3">
    @foreach (Product product in Model.Products ?? Enumerable.Empty<Product>()) {
        <div class="col-sm-12 col-md-6 col-lg-4 col-xl-3">
            <div class="col-12 card h-100 d-flex flex-column justify-content-between">

                <div id="carousel-@product.Id" class="carousel slide" data-bs-ride="false">
                    <div class="carousel-indicators">
                        @if (product.Images?.Count > 0) {
                            <button type="button" data-bs-target="#carousel-@product.Id" data-bs-slide-to="0" class="active" aria-current="true" aria-label="Slide 1"></button>
                            @for (int x = 1; x < product.Images.Count; x++) {
                                <button type="button" data-bs-target="#carousel-@product.Id" data-bs-slide-to="@x" aria-label="Slide @(x + 1)"></button>
                            }
                        }
                    </div>
                    <div class="carousel-inner card-img">
                        @if (product.Images?.Count > 0) {
                            <div class="carousel-item active">
                                <img src="../@product.Images[0].Path" class="d-block w-100" alt="@product.Images[0].Alt">
                            </div>

                            @for (int x = 1; x < product.Images.Count; x++) {
                                <div class="carousel-item">
                                    <img src="../@product.Images[x].Path" class="d-block w-100" alt="@product.Images[x].Alt">
                                </div>
                            }
                        }
                    </div>
                    @* Стрелки предыдущий следующий *@
                    <button class="carousel-control-prev" type="button" data-bs-target="#carousel-@product.Id" data-bs-slide="prev">
                        <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                        <span class="visually-hidden">Предыдущий</span>
                    </button>
                    <button class="carousel-control-next" type="button" data-bs-target="#carousel-@product.Id" data-bs-slide="next">
                        <span class="carousel-control-next-icon" aria-hidden="true"></span>
                        <span class="visually-hidden">Следующий</span>
                    </button>
                </div>

                <div class="card-body">
                    <h5 class="card-title">@product.Name</h5>
                    <p class="card-text">@product.Description</p>
                </div>

                <h5 class="card-title m-2">@product.Price руб.</h5>

                <div class="d-flex mx-1 justify-content-between">
                    <div class="d-flex mx-1 justify-content-between">
                        <p class="me-1"><a asp-page="/Admin/EditProduct" asp-route-productId="@product.Id" class="btn btn btn-lg btn-outline-primary"><i class="fa-solid fa-pen-to-square"></i></a></p>
                        <p><a asp-page="/Admin/DeleteProduct" asp-route-productId="@product.Id" class="btn btn btn-lg btn-outline-danger"><i class="fa-solid fa-trash-can"></i></a></p>
                    </div>

                    <p> <a asp-page="/Product" asp-route-id="@product.Id" class="btn btn-primary m-1">Подробнее...</a></p>
                </div>
            </div>
        </div>
    }
</div>

@* Панель пагинации *@
<div class="d-flex flex-row-reverse border border-1 p-1 mt-3">
    @await Component.InvokeAsync(typeof(ShoeShop.Paginations.Components.PaginationViewComponent), new {
            currentPage = Model.CurrentPage,
            elementsPerPage = Model.ElementsPerPage,
            totalElementsCount = Model.TotalElementsCount,
            page = "/Admin/Catalog",
            routeData = new Dictionary<string, string>([new KeyValuePair<string, string>("sorting", Model.Sorting.ToString()), new KeyValuePair<string, string>("saleFilter", Model.IsSaleFilter.ToString()), new KeyValuePair<string, string>("partproductname", Model.PartProductName)])
        })
</div>